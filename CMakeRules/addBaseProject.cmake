macro(getMSVCappend)
    if(DEFINED MSVC)
        if (MSVC)
                set (MSVC_APPEND ${MSVC_VERSION})
        endif()
    endif()
endmacro(getMSVCappend)
macro(addBaseProject)

set (CMAKE_CXX_STANDARD 11)
IF(DEFINED CMAKE_COMPILER_IS_GNUCXX)
	#SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-fPIC")
ENDIF()
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  # using regular Clang or AppleClang
#	SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-stdlib=libc++")
endif()
IF(DEFINED MSVC)
    # MSVC parallel builds by default
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
ENDIF()
if("${CMAKE_HOST_SYSTEM_NAME}" MATCHES "Linux")
	IF(DEFINED CMAKE_COMPILER_IS_GNUCXX)
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-attributes")
		set (ICEDB_COMMON_LIBS ${ICEDB_COMMON_LIBS} "dl")
		#SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -ldl")
		#SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -ldl")
	ENDIF()
endif()
# If doing a debug build, set the appropriate compiler defines
IF("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
    add_definitions(-D_DEBUG)
ENDIF()

    set(configappend "")
    if (CMAKE_CL_64)
        set(configappend "${configappend}_x64")
    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "64")
        set(configappend "${configappend}_x64")
    else()
        set(configappend "${configappend}_x86")
    endif()
    if (MSVC)
        getMSVCappend()
        set(configappend "${configappend}_vs${MSVC_APPEND}")
        add_definitions(-DCONF="$(Configuration)${configappend}")
        set(CONF CONF)
    elseif (MINGW)
        set(configappend "${configappend}_mingw")
        add_definitions(-DCONF="${CMAKE_BUILD_TYPE}${configappend}")
        set(CONF "\"${CMAKE_BUILD_TYPE}${configappend}\"")
    else()
        set(configappend "${configappend}_${CMAKE_CXX_COMPILER_ID}")
        add_definitions(-DCONF="${CMAKE_BUILD_TYPE}${configappend}")
        set(CONF "\"${CMAKE_BUILD_TYPE}${configappend}\"")
    endif()
    #message("${configappend}")

endmacro(addBaseProject)

